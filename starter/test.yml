Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  # Add your parameters here
  DeployedBy:
    Description: user who deploy this tempplate
    Type: String
    Default: Undefined
  BucketName:
    Description: The name of bucket. It's required
    Type: String

Resources:
  # Add your resources here
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application load balancer
      VpcId:
        Fn::ImportValue: VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: DeployedBy
          Value: !Ref DeployedBy

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for webserver
      VpcId:
        Fn::ImportValue: VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: DeployedBy
          Value: !Ref DeployedBy

  # We include a portion of the LaunchTemplate resource so you can use the UserData.
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: web-servers
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo echo "It works! Udagram, Udacity" > /usr/share/nginx/html/index.html
            service nginx start
            sudo echo "It works! Udagram, Udacity" > /usr/share/nginx/html/index.html
            sudo su
            cd /etc/nginx/sites-enabled
            unlink default
            cd /etc/nginx/conf.d
            printf "some data for the file\nAnd a new line" >> fileName
            server {
                    listen 80 default_server;
                    index index.html;
                    server_name test;
                    root /var/www/test;
            }

        ImageId: ami-040b9e45b2fe01abd
        SecurityGroupIds:
          - !Ref WebserverSecurityGroup
        InstanceType: t3.small
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: web-servers
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject*'
              - 's3:GetObject*'
              - 's3:DeleteObject*'
              Resource:
                - !Sub "arn:aws:s3:::{BucketName}/*"
  
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerInstanceRole
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: PUB-SUBNETS
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: '1'
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: PUB-SUBNET-1
        - Fn::ImportValue: PUB-SUBNET-2
      SecurityGroups: 
        - !Ref LBSecurityGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: VPCID

Outputs:
  WebAppLB:
    Description: DNS Name of webapp
    Value: 
      Fn::Sub:
        - "http://${dnsname}"
        - {dnsname: !GetAtt WebAppLB.DNSName}
    Export:
      Name: WebAppLB
